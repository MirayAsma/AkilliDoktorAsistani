import 'package:flutter/material.dart';
import 'package:akilli_doktor_asistani/services/ai_analysis_service.dart';

class TahlilAnalizRaporuPage extends StatelessWidget {
  final String hastaId;
  
  const TahlilAnalizRaporuPage({Key? key, required this.hastaId}) : super(key: key);

  // DEBUG: HastaId'yi kolayca görebilmek için getter
  String get debugHastaId => hastaId;

  // Tekil ve doğru tanımlı fonksiyon
  Future<Map<String, dynamic>> _fetchHastaDetay(String hastaId) async {
    try {
      // print('Hasta detayı çekiliyor. Hasta ID: $hastaId');
      
      // Hasta ID boşsa, test verilerini döndür
      if (hastaId.isEmpty) {
        // print('Hasta ID boş, test verileri döndürülüyor');
        return {
          'ad_soyad': 'Test Hasta',
          'yas': 35,
          'cinsiyet': 'Erkek',
          'son_lab_tetkik': {'HGB': 12, 'WBC': 6000, 'PLT': 200000, 'Kreatinin': 1.0, 'Glukoz': 100},
          'basvuru_sikayeti': 'Test şikayeti',
          'ameliyat': 'Yok',
          'patoloji': 'Normal',
          'dogum_oykusu': 'Yok',
          'tansiyon': '120/80 mmHg',
          'nabiz': '72',
          'ates': '36.5',
          'onceki_tedavi': 'Yok',
          'uyari': 'Yok',
          'son_goruntuleme': 'Yok',
          'onceki_basvurular': 'Yok',
          'onceki_tetkik': 'Yok',
          'onceki_goruntuleme': 'Yok'
        };
      }
      
      // Firebase'den hasta verilerini çek
      final db = FirebaseFirestore.instance;
      final docRef = db.collection('cases').doc(hastaId);
      final docSnap = await docRef.get();
      
      if (docSnap.exists) {
        final data = docSnap.data() as Map<String, dynamic>;
        // print('Hasta verileri başarıyla çekildi: $data');
        return data;
      } else {
        // print('Hasta bulunamadı. ID: $hastaId');
        // Hasta bulunamadıysa test verilerini döndür
        return {
          'ad_soyad': 'Test Hasta (Bulunamadı)',
          'yas': 35,
          'cinsiyet': 'Erkek',
          'son_lab_tetkik': {'HGB': 12, 'WBC': 6000, 'PLT': 200000, 'Kreatinin': 1.0, 'Glukoz': 100},
          'basvuru_sikayeti': 'Test şikayeti',
          'ameliyat': 'Yok',
          'patoloji': 'Normal',
          'dogum_oykusu': 'Yok',
          'tansiyon': '120/80 mmHg',
          'nabiz': '72',
          'ates': '36.5',
          'onceki_tedavi': 'Yok',
          'uyari': 'Yok',
          'son_goruntuleme': 'Yok',
          'onceki_basvurular': 'Yok',
          'onceki_tetkik': 'Yok',
          'onceki_goruntuleme': 'Yok'
        };
      }
    } catch (e) {
      // print('Hasta detayı çekilirken hata: $e');
      // Test verisi döndür
      return {
        'ad_soyad': 'Test Hasta (Genel Hata)',
        'yas': 35,
        'cinsiyet': 'Erkek',
        'son_lab_tetkik': {'HGB': 12, 'WBC': 6000, 'PLT': 200000, 'Kreatinin': 1.0, 'Glukoz': 100},
        'basvuru_sikayeti': 'Test şikayeti',
        'ameliyat': 'Yok',
        'patoloji': 'Normal',
        'dogum_oykusu': 'Yok',
        'tansiyon': '120/80 mmHg',
        'nabiz': '72',
        'ates': '36.5',
        'onceki_tedavi': 'Yok',
        'uyari': 'Yok',
        'son_goruntuleme': 'Yok',
        'onceki_basvurular': 'Yok',
        'onceki_tetkik': 'Yok',
        'onceki_goruntuleme': 'Yok'
      };
    }
  }

  // Anahtarı düzgün formatlama
  String _formatKey(String key) {
    return key
        .replaceAll('_', ' ')
        .split(' ')
        .map((w) => w.isNotEmpty ? w[0].toUpperCase() + w.substring(1) : '')
        .join(' ');
  }

  // Alana göre ikon belirleme
  IconData _getIconForField(String field) {
    switch (field) {
      case 'ad_soyad': return Icons.person;
      case 'yas': return Icons.cake;
      case 'cinsiyet': return Icons.wc;
      case 'basvuru_sikayeti': return Icons.medical_information;
      case 'ameliyat': return Icons.local_hospital;
      case 'patoloji': return Icons.science;
      case 'dogum_oykusu': return Icons.child_friendly;
      case 'tansiyon': return Icons.monitor_heart;
      case 'nabiz': return Icons.favorite;
      case 'ates': return Icons.thermostat;
      case 'onceki_tedavi': return Icons.medication;
      case 'uyari': return Icons.warning;
      case 'son_lab_tetkik': return Icons.biotech;
      case 'son_goruntuleme': return Icons.image;
      case 'onceki_basvurular': return Icons.history;
      case 'onceki_tetkik': return Icons.analytics;
      case 'onceki_goruntuleme': return Icons.image_search;
      default: return Icons.info;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Hasta Detayı'),
        backgroundColor: Colors.cyan,
      ),
      body: FutureBuilder<Map<String, dynamic>>(
        future: _fetchHastaDetay(hastaId),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }
          
          // Test verileri - her durumda görüntülenecek
          final testData = {
            'ad_soyad': 'Test Hasta',
            'yas': 35,
            'cinsiyet': 'Erkek',
            'son_lab_tetkik': {'HGB': 12, 'WBC': 6000, 'PLT': 200000, 'Kreatinin': 1.0, 'Glukoz': 100},
            'basvuru_sikayeti': 'Test şikayeti',
            'ameliyat': 'Yok',
            'patoloji': 'Normal',
            'dogum_oykusu': 'Yok',
            'tansiyon': '120/80 mmHg',
            'nabiz': '72',
            'ates': '36.5',
            'onceki_tedavi': 'Yok',
            'uyari': 'Yok',
            'son_goruntuleme': 'Yok',
            'onceki_basvurular': 'Yok',
            'onceki_tetkik': 'Yok',
            'onceki_goruntuleme': 'Yok'
          };
          
          final data = snapshot.data ?? testData;
          
          // Görüntülenecek alanlar
          final displayFields = [
            'ad_soyad', 'yas', 'cinsiyet', 'basvuru_sikayeti', 'ameliyat', 'patoloji',
            'dogum_oykusu', 'tansiyon', 'nabiz', 'ates', 'onceki_tedavi', 'uyari',
            'son_goruntuleme', 'onceki_basvurular', 'onceki_tetkik', 'onceki_goruntuleme'
          ];
          
          // Widget listesi
          final widgets = <Widget>[];
          
          // Özel alanları işle
          for (final key in displayFields) {
            // Özel alanlar için özel işlem
            if (key == 'onceki_tetkik') {
              final value = data[key];
              
              if (value is Map && value.isNotEmpty) {
                widgets.add(
                  Card(
                    elevation: 3,
                    margin: const EdgeInsets.only(bottom: 16),
                    color: Colors.cyan.shade50,
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                    child: Padding(
                      padding: const EdgeInsets.all(16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text(
                            'Son Laboratuvar Tetkik Sonuçları',
                            style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18, color: Colors.cyan),
                          ),
                          const Divider(color: Colors.cyan),
                          const SizedBox(height: 12),
                          ...value.entries.map((e) => Padding(
                            padding: const EdgeInsets.only(bottom: 10),
                            child: Row(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Expanded(
                                  flex: 1,
                                  child: Text(
                                    _formatKey(e.key.toString()),
                                    style: const TextStyle(fontWeight: FontWeight.w600, fontSize: 16),
                                  ),
                                ),
                                const SizedBox(width: 16),
                                Expanded(
                                  flex: 1,
                                  child: Text(
                                    '${e.value}',
                                    style: const TextStyle(fontSize: 16),
                                  ),
                                ),
                              ],
                            ),
                          )).toList(),
                        ],
                      ),
                    ),
                  ),
                );
                continue;
              }
            }
            if (data.containsKey(key)) {
              final value = data[key];
              
              // Lab tetkik sonuçları için özel işlem
              if (key == 'son_lab_tetkik' && value is Map) {
                widgets.add(
                  Card(
                    elevation: 3,
                    margin: const EdgeInsets.only(bottom: 16),
                    color: Colors.cyan.shade50,
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                    child: Padding(
                      padding: const EdgeInsets.all(16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text(
                            'Önceki Laboratuvar Tetkik Sonuçları',
                            style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18, color: Colors.cyan),
                          ),
                          const Divider(color: Colors.cyan),
                          const SizedBox(height: 12),
                          ...value.entries.map((e) => Padding(
                            padding: const EdgeInsets.only(bottom: 10),
                            child: Row(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Expanded(
                                  flex: 2,
                                  child: Text(
                                    _formatKey(e.key.toString()),
                                    style: const TextStyle(fontWeight: FontWeight.w600, fontSize: 16),
                                  ),
                                ),
                                const SizedBox(width: 16),
                                Expanded(
                                  flex: 3,
                                  child: Text(
                                    '${e.value}',
                                    style: const TextStyle(fontSize: 16),
                                  ),
                                ),
                              ],
                            ),
                          )).toList(),
                        ],
                      ),
                    ),
                  ),
                );
                continue;
              }
              
              // Diğer alanlar için standart görünüm
              widgets.add(
                Card(
                  elevation: 2,
                  margin: const EdgeInsets.only(bottom: 12),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                  child: ListTile(
                    leading: Icon(_getIconForField(key), color: Colors.cyan),
                    title: Text(_formatKey(key)),
                    subtitle: Text(
                      value.toString(),
                      style: const TextStyle(fontSize: 16),
                    ),
                  ),
                ),
              );
            }
          }
          
          // Tüm widget'ları bir ListView içinde göster
          return ListView(
            padding: const EdgeInsets.all(16),
            children: widgets,
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Analiz sonuçlarını göster
          final sonTetkik = {
            'HGB': 12,
            'WBC': 6000,
            'PLT': 200000,
            'Kreatinin': 1.0,
            'Glukoz': 100
          };
          
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (_) => TahlilAnalizSonuclariPage(tahlil: sonTetkik),
            ),
          );
        },
        backgroundColor: Colors.cyan,
        child: const Icon(Icons.analytics),
      ),
    );
  }
}
